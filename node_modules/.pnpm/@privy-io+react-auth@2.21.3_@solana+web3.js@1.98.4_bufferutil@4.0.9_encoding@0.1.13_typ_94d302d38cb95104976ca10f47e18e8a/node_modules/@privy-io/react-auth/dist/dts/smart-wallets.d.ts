import * as react_jsx_runtime from 'react/jsx-runtime';
import react__default from 'react';
import { i as SendTransactionModalUIOptions, j as SignMessageModalUIOptions } from './types-4UMHBDGW.js';
import { SmartAccountClient } from 'permissionless';
import { SendTransactionParameters, Chain, Hash, SignableMessage, Hex, TypedData, SignTypedDataParameters, EIP1193Provider, PublicClient, HttpTransport, WalletClient, PaymasterRpcSchema } from 'viem';
import { SmartAccount, SendUserOperationParameters } from 'viem/account-abstraction';
import { SmartWalletType } from '@privy-io/js-sdk-core';
import '@coinbase/wallet-sdk';
import '@reown/appkit';
import '@solana/wallet-adapter-base';
import '@privy-io/public-api';
import '@base-org/account';
import '@solana/wallet-standard-features';
import '@wallet-standard/base';
import '@wallet-standard/features';
import '@metamask/eth-sig-util';
import '@solana/web3.js';
import 'eventemitter3';

type Call = {
    readonly to?: any;
    readonly value?: any;
    readonly data?: any;
};
declare const signerToSmartAccountClient: ({ owner, smartWalletType, smartWalletVersion, chain, publicClient, bundlerUrl, paymasterUrl, paymasterContext, }: {
    owner: EIP1193Provider;
    smartWalletType: SmartWalletType;
    smartWalletVersion?: string;
    chain: Chain;
    publicClient: PublicClient;
    bundlerUrl: string;
    paymasterUrl?: string;
    paymasterContext?: Record<string, any>;
}) => Promise<SmartAccountClient<HttpTransport, Chain, SmartAccount, WalletClient, PaymasterRpcSchema>>;
type SmartWalletClientType = Omit<Awaited<ReturnType<typeof signerToSmartAccountClient>>, 'sendTransaction' | 'signMessage'> & {
    sendTransaction: (input: SendTransactionParameters<Chain, SmartAccount> | SendUserOperationParameters<SmartAccount, undefined, Call[]>, options?: {
        uiOptions?: SendTransactionModalUIOptions;
    }) => Promise<Hash>;
    signMessage: (input: {
        message: SignableMessage;
    }, options?: {
        uiOptions?: SignMessageModalUIOptions;
    }) => Promise<Hex>;
    signTypedData: <const TTypedData extends TypedData | {
        [key: string]: unknown;
    }, TPrimaryType extends string, TAccount extends SmartAccount | undefined = SmartAccount | undefined>(input: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>, options?: {
        uiOptions?: SignMessageModalUIOptions;
    }) => Promise<Hex>;
};

interface SmartWalletClientTypeWithSwitchChain extends SmartWalletClientType {
    switchChain: (args: {
        id: number;
    }) => Promise<void>;
}

interface SmartWalletsInterface {
    client?: SmartWalletClientTypeWithSwitchChain;
    getClientForChain: ({ id }: {
        id: number;
    }) => Promise<SmartWalletClientType | undefined>;
}
interface SmartWalletsProviderProps {
    config?: {
        paymasterContext?: Record<string, any>;
    };
    children: react__default.ReactNode;
}
declare const SmartWalletsProvider: ({ config, children }: SmartWalletsProviderProps) => react_jsx_runtime.JSX.Element;
declare const useSmartWallets: () => SmartWalletsInterface;

export { type SmartWalletClientType, SmartWalletsProvider, type SmartWalletsProviderProps, useSmartWallets };
