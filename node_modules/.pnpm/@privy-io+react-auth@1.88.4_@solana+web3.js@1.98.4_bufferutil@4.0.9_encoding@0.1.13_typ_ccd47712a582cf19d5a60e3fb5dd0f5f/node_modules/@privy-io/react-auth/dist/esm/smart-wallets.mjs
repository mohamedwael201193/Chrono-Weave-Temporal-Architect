import{jsx as e}from"react/jsx-runtime";import{useContext as a,useState as t,useEffect as r,createContext as n}from"react";import{u as i,E as s}from"./useWallets.mjs";import{u as o,h as l,P as c}from"./privy-context.mjs";import{u as m,M as d,g as u}from"./getEmbeddedConnectedWallet.mjs";import{createSmartAccountClient as p}from"permissionless";import{toLightSmartAccount as y,toBiconomySmartAccount as g,toEcdsaKernelSmartAccount as E,toSafeSmartAccount as h}from"permissionless/accounts";import{createPimlicoClient as P}from"permissionless/clients/pimlico";import{createPublicClient as f,http as w}from"viem";import{entryPoint06Address as v,entryPoint07Address as T}from"viem/account-abstraction";import"tinycolor2";import"ofetch";let W=({calls:e,chain:a,maxPriorityFeePerGas:t,maxFeePerGas:r,nonce:n})=>e.map((e=>({to:e.to||void 0,data:e.data,value:e.value,chainId:a.id,nonce:n,maxFeePerGas:r,maxPriorityFeePerGas:t})));let S={address:v,version:"0.6"},C={address:T,version:"0.7"},N=async({owner:e,smartWalletType:a,chain:t,bundlerUrl:r,paymasterUrl:n,paymasterContext:i})=>{let s=f({chain:t,transport:w()}),o=await(({owner:e,smartWalletType:a,chain:t})=>{let r=f({chain:t,transport:w()});switch(a){case"safe":return h({client:r,entryPoint:C,owners:[e],version:"1.4.1"});case"kernel":return E({client:r,version:"0.3.1",entryPoint:C,owners:[e]});case"biconomy":return g({client:r,owners:[e],entryPoint:S});case"light_account":return y({client:r,entryPoint:S,owner:e,version:"1.1.0"});default:throw Error(`Invalid smart account type: ${a}.`)}})({owner:e,smartWalletType:a,chain:t}),l=n?P({transport:w(n),entryPoint:o.entryPoint}):void 0;return p({account:o,chain:t,paymaster:l,paymasterContext:i,bundlerTransport:w(r),userOperation:{estimateFeesPerGas:async()=>{let e=await s.estimateFeesPerGas();return{...e,maxFeePerGas:125n*e.maxFeePerGas/100n,maxPriorityFeePerGas:125n*e.maxPriorityFeePerGas/100n}}}})};let x=n({client:void 0});const D=({config:a,children:t})=>e(I,{children:e(M,{config:a,children:e(A,{children:t})})}),F=()=>{let{client:e}=a(x);return{client:e}};let _=n({config:void 0}),G=()=>{let{config:e}=a(_);return{config:e}},I=({children:a})=>{let[n,i]=t(void 0),{client:s}=o();return r((()=>{!n&&s&&(async()=>{try{if(!s)return void console.warn("No client found");let e=await s.getSmartWalletsConfig();i(e)}catch(e){console.warn("Error generating smart wallet config: ",e)}})()}),[!!s]),e(_.Provider,{value:{config:n},children:a})},M=({config:a,children:n})=>{let{config:o}=G(),{defaultChain:m}=i(),[d]=t(m),{wallets:p}=s(),{user:y}=l(),[g,E]=t(),h=u(p);return r((()=>{(async()=>{if(!o?.enabled||!y||!h)return void E(void 0);if(g&&g.chain.id===d.id)return;let e=o.configuredNetworks.find((e=>e.chainId===`eip155:${d.id}`));if(!e)throw new c(`The chain ${d.name} (eip155:${d.id}) must be configured in the smart wallet configuration in your dashboard`);let t=y.smartWallet?.smartWalletType??o.smartWalletType;try{let r=await(async(e,a,t,r,n)=>{let i=await e.getEthereumProvider();return await N({owner:i,smartWalletType:t,chain:a,paymasterContext:n,...r})})(h,d,t,e,a?.paymasterContext);E(r)}catch(e){console.error("Error loading smart wallet:",e)}})()}),[!!o?.enabled,!!y?.smartWallet,!!h]),e(b.Provider,{value:{client:g},children:n})},b=n({client:void 0}),A=({children:t})=>{let{client:n}=(()=>{let{client:e}=a(b);return{client:e}})(),{config:s}=G(),{wrapSmartAccountClient:c}=(()=>{let{noPromptOnSignature:e,openPrivyModal:a}=o(),t=i(),{setModalData:r}=m();return{wrapSmartAccountClient:n=>{let{sendTransaction:i,signMessage:s,signTypedData:o,...l}=n;return{...l,sendTransaction:async n=>{if(t.embeddedWallets.noPromptOnSignature||e.current)return await i(n);let s=[];"calls"in n&&void 0!==n.calls?s=[...n.calls]:"to"in n&&(s=[{to:n.to,value:n.value||BigInt(0),data:n.data||"0x"}]);let o=async()=>{if(!l.paymaster)return!1;let{paymasterAndData:e,paymasterData:a}=await l.prepareUserOperation({calls:s,maxFeePerGas:n.maxFeePerGas,maxPriorityFeePerGas:n.maxPriorityFeePerGas,nonce:n.nonce?BigInt(n.nonce):void 0});return Number(e??a??0)>0};return new Promise((async(t,c)=>{e.current=!0,r({connectWallet:{onCompleteNavigateTo:d.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:W({calls:s,chain:l.chain,maxPriorityFeePerGas:n.maxPriorityFeePerGas,maxFeePerGas:n.maxFeePerGas,nonce:n.nonce?BigInt(n.nonce):void 0}),rootWallet:{address:l.account.address},transactingWallet:{address:l.account.address,walletIndex:null},getIsSponsored:o,onConfirm:()=>i(n),onSuccess:e=>t(e.hash),onFailure:c,uiOptions:{}}}),a(d.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1}))},signMessage:async({message:n})=>t.embeddedWallets.noPromptOnSignature||e.current?await s({message:n}):new Promise((async(t,i)=>{e.current=!0,r({connectWallet:{onCompleteNavigateTo:d.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:n,confirmAndSign:()=>s({message:n}),onSuccess:e=>t(e),onFailure:i,uiOptions:{}}}),a(d.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1})),signTypedData:async t=>e.current?await o(t):new Promise((async(n,i)=>{e.current=!0,r({connectWallet:{onCompleteNavigateTo:d.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:t,confirmAndSign:()=>o(t),onSuccess:e=>n(e),onFailure:i,uiOptions:{}}}),a(d.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{e.current=!1}))}}}})(),{user:u}=l(),{generateSiweMessageForSmartWallet:p,linkSmartWallet:y,noPromptOnSignature:g}=o();return r((()=>{(async()=>{if(n&&!u?.smartWallet&&s?.enabled)try{let e=await p({address:n.account.address,chainId:`eip155:${n.chain.id}`});g.current=!0;let a=await n.signMessage({message:e});await y({signature:a,message:e,smartWalletType:s.smartWalletType})}catch(e){console.error("Error creating smart wallet:",e)}finally{g.current=!1}})()}),[!!n,!!u?.smartWallet,!!s?.enabled]),e(x.Provider,{value:{client:u?.smartWallet&&n?c(n):void 0},children:t})};export{D as SmartWalletsProvider,F as useSmartWallets};
