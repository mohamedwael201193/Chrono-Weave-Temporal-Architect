import { aF as ConnectedSolanaWallet, t as Wallet } from './types.js';
export { S as SolanaAdapterConnector, aG as toSolanaWalletConnectors } from './types.js';
import { Transaction, VersionedTransaction, ParsedTransactionWithMeta } from '@solana/web3.js';
import '@metamask/eth-sig-util';
import '@ethersproject/providers';
import 'eventemitter3';
import '@privy-io/public-api';
import '@solana/wallet-adapter-base';
import 'react';
import 'viem';
import 'web3-core';
import '@privy-io/js-sdk-core';

/**
 * A transaction that can be sent to the Solana network. Legacy transactions or v0 transactions (versioned) are supported.
 * Refer to {@link https://solana-labs.github.io/solana-web3.js/classes/Transaction.html Transaction} and {@link https://solana-labs.github.io/solana-web3.js/classes/VersionedTransaction.html VersionedTransaction}
 */
type SupportedSolanaTransaction = Transaction | VersionedTransaction;
/**
 * Result of the transaction sent to the Solana network.
 */
type SolanaTransactionReceipt = {
    /** The signature of the transaction */
    signature: string;
    /** The parsed transaction result. Refer to {@link https://solana-labs.github.io/solana-web3.js/types/ParsedTransactionWithMeta.html ParsedTransactionWithMeta}*/
    parsedTransaction: ParsedTransactionWithMeta | null;
    /** The fees payed for the transaction in lamports */
    fees: bigint;
};

/**
 * Hook to create and interact with Solana wallets. This currently only supports an embedded Solana wallet and no
 * external wallets.
 *
 * @returns wallets {ConnectedSolanaWallet[]} an array of connected Solana wallets
 * @returns createWallet {() => Promise<Wallet>} an method to create an embedded Solana wallet.
 */
interface UseSolanaWalletsInterface {
    /**
     * An array of the connected Solana wallets for the user. Currently, this will only contain the embedded
     * Solana wallet if the user has created one.
     */
    wallets: ConnectedSolanaWallet[];
    /**
     * Method to create an embedded Solana wallet for a user. This method will throw an error if the user already has an
     * embedded Solana or Ethereum wallet. Currently, only embedded Solana wallets with automatic recovery are supported.
     * @returns wallet {Wallet} the Solana linked account for the user.
     */
    createWallet: () => Promise<Wallet>;
    /**
     * Shows the user a Privy modal, from which they can copy their embedded solana wallet's private
     * key for easy export to another wallet client (e.g. Phantom, Backpack). The private key is loaded
     * on an iframe running on a separate domain from your app, meaning your app cannot access it.
     *
     * This method will error if the user is not authenticated or does not have an embedded solana wallet.
     * @param options {@link {address: string}} (optional) wallet address to export the private key for
     * @returns Promise that resolves once the user exits the modal
     */
    exportWallet: (options?: {
        address: string;
    }) => Promise<void>;
}
declare const useSolanaWallets: () => UseSolanaWalletsInterface;

export { ConnectedSolanaWallet, type SolanaTransactionReceipt, type SupportedSolanaTransaction, type UseSolanaWalletsInterface, useSolanaWallets };
