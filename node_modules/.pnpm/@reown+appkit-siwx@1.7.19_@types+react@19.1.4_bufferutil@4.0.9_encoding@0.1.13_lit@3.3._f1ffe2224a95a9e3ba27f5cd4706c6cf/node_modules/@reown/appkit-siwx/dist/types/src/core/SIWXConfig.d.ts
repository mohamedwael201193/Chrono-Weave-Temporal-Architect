import type { CaipNetworkId } from '@reown/appkit-common';
import type { SIWXConfig as SIWXConfigInterface, SIWXMessage, SIWXSession } from '@reown/appkit-controllers';
import type { SIWXMessenger } from './SIWXMessenger.js';
import type { SIWXStorage } from './SIWXStorage.js';
import type { SIWXVerifier } from './SIWXVerifier.js';
/**
 * This is the base class for a SIWX config.
 * You may extend this class to create your own configuration replacing the default logic.
 */
export declare abstract class SIWXConfig implements SIWXConfigInterface {
    private messenger;
    private verifiers;
    private storage;
    required: boolean;
    constructor(params: SIWXConfig.ConstructorParams);
    /**
     * Uses the messenger to create a message.
     *
     * @param input SIWXMessage.Input
     * @returns Promise<SIWXMessage>
     */
    createMessage(input: SIWXMessage.Input): Promise<SIWXMessage>;
    /**
     * Combine the verifiers to verify the session and storage to store it.
     * It will throw an error if the session is not valid.
     *
     * @param session SIWXSession
     * @returns Promise<void>
     */
    addSession(session: SIWXSession): Promise<void>;
    /**
     * Combine the verifiers to verify the sessions and storage to store all of them.
     * It will throw an error if any of the sessions is not valid.
     *
     * @param chainId CaipNetworkId
     * @param address string
     * @returns Promise<SIWXSession[]>
     */
    setSessions(sessions: SIWXSession[]): Promise<void>;
    /**
     * Get the sessions from the storage and verify them.
     * If the session is not valid, it will be removed from the storage.
     *
     * @param chainId CaipNetworkId
     * @param address string
     * @returns Promise<SIWXSession[]>
     */
    getSessions(chainId: CaipNetworkId, address: string): Promise<SIWXSession[]>;
    /**
     * Remove the session from the storage.
     *
     * @param chainId CaipNetworkId
     * @param address string
     * @returns Promise<void>
     */
    revokeSession(chainId: CaipNetworkId, address: string): Promise<void>;
    /**
     * This method should verify the session.
     * It will first check if the verifier should verify the session and then call the verify method.
     * It will return `true` if the session is valid for all verifications and there is at least one verification.
     *
     * @param session SIWXSession
     * @returns Promise<boolean> - If `true` means the session is valid.
     */
    protected verifySession(session: SIWXSession): Promise<boolean>;
    /**
     * This method determines whether the wallet stays connected when the user denies the signature request.
     *
     * @returns {boolean}
     */
    getRequired(): boolean;
}
export declare namespace SIWXConfig {
    type ConstructorParams = {
        /**
         * The messenger to create the messages.
         */
        messenger: SIWXMessenger;
        /**
         * The verifiers to verify the sessions.
         */
        verifiers: SIWXVerifier[];
        /**
         * The storage to store the sessions.
         */
        storage: SIWXStorage;
        /**
         * If false the wallet stays connected when user denies the signature request.
         * @default true
         */
        required?: boolean;
    };
}
