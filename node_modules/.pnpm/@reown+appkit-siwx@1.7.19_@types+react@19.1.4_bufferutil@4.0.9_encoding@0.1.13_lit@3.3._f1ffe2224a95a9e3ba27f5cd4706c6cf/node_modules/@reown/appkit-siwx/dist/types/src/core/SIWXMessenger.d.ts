import type { SIWXMessage } from '@reown/appkit-controllers';
/**
 * This is the base class for a SIWX messenger.
 * It provides the basic structure for creating a SIWX message and util functions.
 */
export declare abstract class SIWXMessenger {
    domain: SIWXMessage['domain'];
    uri: SIWXMessage['uri'];
    statement?: SIWXMessage['statement'];
    resources?: SIWXMessage['resources'];
    /**
     * The version of the SIWXMessage class
     */
    protected abstract readonly version: SIWXMessage['version'];
    /**
     * Expiration time in milliseconds
     */
    protected expiration?: number;
    /**
     * Getter function for message nonce value
     */
    protected getNonce: SIWXMessenger.ConstructorParams['getNonce'];
    /**
     * Getter function for message request ID
     */
    protected getRequestId?: SIWXMessenger.ConstructorParams['getRequestId'];
    /**
     * The method that generates the message string.
     * This method must be implemented by the child class.
     *
     * @param params SIWXMessage.Data
     * @returns string
     */
    protected abstract stringify(params: SIWXMessage.Data): string;
    constructor(params: SIWXMessenger.ConstructorParams);
    /**
     * This is the default method to create a SIWXMessage object.
     * It will call the `getNonce`, `getRequestId`, `getExpirationTime`, `getIssuedAt`, and `getNotBefore` methods.
     * It appends the `stringify` method to the object as `toString`.
     *
     * @param input SIWXMessage.Input
     * @returns
     */
    createMessage(input: SIWXMessage.Input): Promise<SIWXMessage>;
    /**
     * This method generates the expiration time based on the `notBefore` value and the `expiration` value.
     * You may override this method to provide a custom expiration time.
     *
     * @param Pick<SIWXMessage.Input, 'notBefore'>
     * @returns string | undefined - The expiration time in `stringifyDate` format or undefined if not available
     */
    protected getExpirationTime({ notBefore }: Pick<SIWXMessage.Input, 'notBefore'>): string | undefined;
    /**
     * This method generates the `notBefore` formatted value based on the `notBefore` input.
     * You may override this method to provide a custom `notBefore` value.
     *
     * @param Pick<SIWXMessage.Input, 'notBefore'>
     * @returns string | undefined - The `notBefore` value in `stringifyDate` format or undefined if not available
     */
    protected getNotBefore({ notBefore }: Pick<SIWXMessage.Input, 'notBefore'>): string | undefined;
    /**
     * This method generates the `issuedAt` formatted value based on the current date.
     * You may override this method to provide a custom `issuedAt` value.
     *
     * @returns string - The `issuedAt` value in `stringifyDate` format
     */
    protected getIssuedAt(): string;
    /**
     * This method converts a date object to a formatted string.
     * You may override this method to provide a custom date format.
     *
     * @param date Date
     * @returns string - The date in ISO format
     */
    protected stringifyDate(date: Date): string;
}
export declare namespace SIWXMessenger {
    interface ConstructorParams extends Omit<SIWXMessage.Metadata, 'nonce' | 'version'> {
        /**
         * Time in milliseconds
         */
        expiration?: number;
        /**
         * Getter function for message nonce value
         */
        getNonce: (params: SIWXMessage.Input) => Promise<SIWXMessage['nonce']>;
        /**
         * Getter function for message request ID
         * If not provided, the request ID will be omitted
         */
        getRequestId?: () => Promise<SIWXMessage['requestId']>;
    }
}
