import { type CaipNetworkId } from '@reown/appkit-common';
import type { Exchange, GetExchangesParams, PayUrlParams } from '../utils/ExchangeUtil.js';
type PayStatus = 'UNKNOWN' | 'IN_PROGRESS' | 'SUCCESS' | 'FAILED';
type OpenPayUrlParams = {
    exchangeId: string;
    openInNewTab?: boolean;
};
export type CurrentPayment = {
    type: PaymentType;
    exchangeId?: string;
    sessionId?: string;
    status?: PayStatus;
    result?: string;
};
export type PayResult = CurrentPayment['result'];
export interface ExchangeControllerState {
    amount: number;
    error: string | null;
    isLoading: boolean;
    exchanges: Exchange[];
    currentPayment?: CurrentPayment;
    paymentAsset: {
        network: CaipNetworkId;
        asset: string;
        metadata: {
            name: string;
            symbol: string;
            decimals: number;
        };
    };
}
type StateKey = keyof ExchangeControllerState;
type PaymentType = 'wallet' | 'exchange';
export declare const ExchangeController: {
    state: ExchangeControllerState;
    subscribe(callback: (newState: ExchangeControllerState) => void): () => void;
    subscribeKey<K extends StateKey>(key: K, callback: (value: ExchangeControllerState[K]) => void): () => void;
    resetState(): void;
    getExchanges(): Exchange[];
    fetchExchanges(): Promise<void>;
    getAvailableExchanges(params?: GetExchangesParams): Promise<import("../utils/ExchangeUtil.js").GetExchangesResult>;
    getPayUrl(exchangeId: string, params: PayUrlParams): Promise<{
        url: string;
        sessionId: string;
    }>;
    openPayUrl(openParams: OpenPayUrlParams, params: PayUrlParams): Promise<{
        url: string;
        sessionId: string;
    }>;
    getExchangeById(exchangeId: string): Exchange | undefined;
    handlePayWithExchange(exchangeId: string): Promise<{
        url: string;
        openInNewTab: boolean;
    } | null>;
};
export {};
