import{z as e}from"zod";import{InvalidInputError as r,PrivyErrorCode as t}from"@privy-io/api-base";import{TypedDataTypesInputParams as i,ChainType as a,OwnerInputFields as l,KeyQuorumId as n}from"./wallet-api/wallets/index.mjs";import"./api.mjs";import"./core.mjs";import"bs58";import"libphonenumber-js/max";import"viem";import"./transaction.mjs";import"./wallet-api/export.mjs";import"./wallet-api/wallets/spark/index.mjs";import"./wallet-api/wallets/spark/utils.mjs";const o=e.enum(["ALLOW","DENY"]);let s=e.union([e.string(),e.number(),e.boolean(),e.null()]),c=e.lazy((()=>e.union([s,e.array(c),e.record(c)])));const m=e.union([e.literal("eq"),e.literal("gt"),e.literal("gte"),e.literal("lt"),e.literal("lte"),e.literal("in")]),d=e.object({operator:m,value:e.union([e.string(),e.array(e.string())])}),u=e.object({field_source:e.literal("ethereum_transaction"),field:e.union([e.literal("to"),e.literal("value")])}).strict().merge(d),_=e.object({field_source:e.literal("ethereum_calldata"),field:e.string(),abi:c}).strict().merge(d),p=e.object({field_source:e.literal("ethereum_typed_data_domain"),field:e.union([e.literal("chainId"),e.literal("verifyingContract"),e.literal("chain_id"),e.literal("verifying_contract")])}).strict().merge(d),g=e.object({field_source:e.literal("ethereum_typed_data_message"),field:e.string(),typed_data:e.object({types:i,primary_type:e.string()})}).strict().merge(d),f=e.object({field_source:e.literal("ethereum_7702_authorization"),field:e.literal("contract")}).strict().merge(d),b=e.object({field_source:e.literal("solana_program_instruction"),field:e.literal("programId")}).strict().merge(d),h=e.object({field_source:e.literal("solana_system_program_instruction"),field:e.union([e.literal("instructionName"),e.literal("Transfer.from"),e.literal("Transfer.to"),e.literal("Transfer.lamports")])}).strict().merge(d),y=e.object({field_source:e.literal("solana_token_program_instruction"),field:e.union([e.literal("instructionName"),e.literal("TransferChecked.source"),e.literal("TransferChecked.destination"),e.literal("TransferChecked.authority"),e.literal("TransferChecked.amount"),e.literal("TransferChecked.mint")])}).strict().merge(d),w=e.discriminatedUnion("field_source",[u,_,p,g,f,b,h,y]);let j=e.union([e.literal("eth_sendTransaction"),e.literal("eth_signTransaction"),e.literal("eth_signTypedData_v4"),e.literal("eth_sign7702Authorization"),e.literal("signTransaction"),e.literal("signAndSendTransaction"),e.literal("exportPrivateKey"),e.literal("*")]);const v=e.object({name:e.string().max(50,"Rule name must be fewer than 50 characters"),method:j,conditions:e.array(w),action:o}).strict(),T=v.extend({id:e.string()}).strict(),x=v.extend({id:e.string().optional()}).strict(),A=e.object({policy_id:e.string().min(1),rule_id:e.string().min(1)}).catch((({error:e})=>{throw new r(e.message,t.INVALID_DATA)}));let I=e.object({version:e.literal("1.0"),name:e.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:a,rules:e.array(x),...l}).strict();const k=I.refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}),D=I.omit({owner:!0,owner_id:!0}).extend({id:e.string(),created_at:e.number(),owner_id:n.nullable(),rules:e.array(T)}),C=e.object({policy_id:e.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new r(e.message,t.INVALID_DATA)})),N=e.object({name:e.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),rules:e.array(v).optional(),...l}).strict().superRefine(((e,r)=>{Object.values(e).every((e=>void 0===e||""===e))&&r.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.owner&&void 0!==e.owner_id&&r.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."})}));export{d as BaseCondition,w as Condition,m as ConditionOperator,f as Ethereum7702AuthorizationCondition,_ as EthereumCalldataCondition,u as EthereumTransactionCondition,p as EthereumTypedDataDomainCondition,g as EthereumTypedDataMessageCondition,o as PolicyAction,C as PolicyIdFromPath,D as PolicyResponse,k as PolicyWithoutValidation,x as Rule,A as RuleIdAndPolicyIdFromPath,v as RuleInput,T as RuleResponse,b as SolanaProgramInstruction,h as SolanaSystemProgramInstruction,y as SolanaTokenProgramInstruction,N as UpdatePolicyInput};
