"use strict";var e=require("zod"),r=require("@privy-io/api-base"),t=require("./wallet-api/wallets/index.js");require("./api.js"),require("./core.js"),require("bs58"),require("libphonenumber-js/max"),require("viem"),require("./transaction.js"),require("./wallet-api/export.js"),require("./wallet-api/wallets/spark/index.js"),require("./wallet-api/wallets/spark/utils.js");const i=e.z.enum(["ALLOW","DENY"]);let a=e.z.union([e.z.string(),e.z.number(),e.z.boolean(),e.z.null()]),o=e.z.lazy((()=>e.z.union([a,e.z.array(o),e.z.record(o)])));const n=e.z.union([e.z.literal("eq"),e.z.literal("gt"),e.z.literal("gte"),e.z.literal("lt"),e.z.literal("lte"),e.z.literal("in")]),l=e.z.object({operator:n,value:e.z.union([e.z.string(),e.z.array(e.z.string())])}),s=e.z.object({field_source:e.z.literal("ethereum_transaction"),field:e.z.union([e.z.literal("to"),e.z.literal("value")])}).strict().merge(l),d=e.z.object({field_source:e.z.literal("ethereum_calldata"),field:e.z.string(),abi:o}).strict().merge(l),c=e.z.object({field_source:e.z.literal("ethereum_typed_data_domain"),field:e.z.union([e.z.literal("chainId"),e.z.literal("verifyingContract"),e.z.literal("chain_id"),e.z.literal("verifying_contract")])}).strict().merge(l),z=e.z.object({field_source:e.z.literal("ethereum_typed_data_message"),field:e.z.string(),typed_data:e.z.object({types:t.TypedDataTypesInputParams,primary_type:e.z.string()})}).strict().merge(l),u=e.z.object({field_source:e.z.literal("ethereum_7702_authorization"),field:e.z.literal("contract")}).strict().merge(l),m=e.z.object({field_source:e.z.literal("solana_program_instruction"),field:e.z.literal("programId")}).strict().merge(l),p=e.z.object({field_source:e.z.literal("solana_system_program_instruction"),field:e.z.union([e.z.literal("instructionName"),e.z.literal("Transfer.from"),e.z.literal("Transfer.to"),e.z.literal("Transfer.lamports")])}).strict().merge(l),_=e.z.object({field_source:e.z.literal("solana_token_program_instruction"),field:e.z.union([e.z.literal("instructionName"),e.z.literal("TransferChecked.source"),e.z.literal("TransferChecked.destination"),e.z.literal("TransferChecked.authority"),e.z.literal("TransferChecked.amount"),e.z.literal("TransferChecked.mint")])}).strict().merge(l),g=e.z.discriminatedUnion("field_source",[s,d,c,z,u,m,p,_]);let y=e.z.union([e.z.literal("eth_sendTransaction"),e.z.literal("eth_signTransaction"),e.z.literal("eth_signTypedData_v4"),e.z.literal("eth_sign7702Authorization"),e.z.literal("signTransaction"),e.z.literal("signAndSendTransaction"),e.z.literal("exportPrivateKey"),e.z.literal("*")]);const h=e.z.object({name:e.z.string().max(50,"Rule name must be fewer than 50 characters"),method:y,conditions:e.z.array(g),action:i}).strict(),f=h.extend({id:e.z.string()}).strict(),b=h.extend({id:e.z.string().optional()}).strict(),x=e.z.object({policy_id:e.z.string().min(1),rule_id:e.z.string().min(1)}).catch((({error:e})=>{throw new r.InvalidInputError(e.message,r.PrivyErrorCode.INVALID_DATA)}));let w=e.z.object({version:e.z.literal("1.0"),name:e.z.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:t.ChainType,rules:e.z.array(b),...t.OwnerInputFields}).strict();const I=w.refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}),v=w.omit({owner:!0,owner_id:!0}).extend({id:e.z.string(),created_at:e.z.number(),owner_id:t.KeyQuorumId.nullable(),rules:e.z.array(f)}),j=e.z.object({policy_id:e.z.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new r.InvalidInputError(e.message,r.PrivyErrorCode.INVALID_DATA)})),T=e.z.object({name:e.z.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),rules:e.z.array(h).optional(),...t.OwnerInputFields}).strict().superRefine(((e,r)=>{Object.values(e).every((e=>void 0===e||""===e))&&r.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.owner&&void 0!==e.owner_id&&r.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."})}));exports.BaseCondition=l,exports.Condition=g,exports.ConditionOperator=n,exports.Ethereum7702AuthorizationCondition=u,exports.EthereumCalldataCondition=d,exports.EthereumTransactionCondition=s,exports.EthereumTypedDataDomainCondition=c,exports.EthereumTypedDataMessageCondition=z,exports.PolicyAction=i,exports.PolicyIdFromPath=j,exports.PolicyResponse=v,exports.PolicyWithoutValidation=I,exports.Rule=b,exports.RuleIdAndPolicyIdFromPath=x,exports.RuleInput=h,exports.RuleResponse=f,exports.SolanaProgramInstruction=m,exports.SolanaSystemProgramInstruction=p,exports.SolanaTokenProgramInstruction=_,exports.UpdatePolicyInput=T;
