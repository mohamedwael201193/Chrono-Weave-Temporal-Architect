"use strict";var e=require("zod"),t=require("../core.js"),r=require("./export.js"),s=require("./wallets/index.js");require("bs58"),require("libphonenumber-js/max"),require("viem"),require("@privy-io/api-base"),require("../api.js"),require("../transaction.js"),require("./wallets/spark/index.js"),require("./wallets/spark/utils.js");const i=e.z.enum(["ethereum","solana"]),a=e.z.enum(["private-key"]);let n=e.z.union([t.WalletAddress,t.SolanaWalletAddress]),p=e=>"solana"===e.chain_type?t.SolanaWalletAddress.safeParse(e.address).success:"ethereum"===e.chain_type&&t.WalletAddress.safeParse(e.address).success;const o=e.z.object({address:n,chain_type:i,entropy_type:a,encryption_type:r.HPKEEncryption}).strict().refine(p,"Invalid address for specified chain type."),l=e.z.object({encryption_type:r.HPKEEncryption,encryption_public_key:e.z.string()}),c=s.BaseWalletApiCreateInput.omit({chain_type:!0,authorization_key_ids:!0,authorization_threshold:!0}).extend({wallet:e.z.object({address:n,chain_type:i,entropy_type:a,ciphertext:e.z.string(),encapsulated_key:e.z.string(),encryption_type:r.HPKEEncryption})}).strict().refine((e=>p(e.wallet)),"Invalid address for specified chain type.");exports.WalletImportInitInput=o,exports.WalletImportInitResponse=l,exports.WalletImportSubmitInput=c,exports.WalletImportSupportedChains=i,exports.WalletImportSupportedEntropyTypes=a;
