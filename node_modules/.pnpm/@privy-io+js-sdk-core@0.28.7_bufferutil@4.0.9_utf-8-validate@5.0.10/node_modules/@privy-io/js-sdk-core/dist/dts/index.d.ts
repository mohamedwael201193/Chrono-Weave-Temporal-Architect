import Privy from './Privy';
export type { OAuthProviderType } from '@privy-io/public-api';
export type { default as Storage } from './storage/Storage';
export { LocalStorage } from './storage/LocalStorage';
export { InMemoryCache } from './storage/InMemoryStorage';
export type { ErrorMessageMap } from './Error';
export { PrivyApiError, PrivyClientError, createErrorFormatter } from './Error';
export { PrivyEmbeddedWalletErrorCode, errorIndicatesRecoveryIsNeeded, ProviderErrors, PrivyProviderRpcError, PrivyConnectorError, EmbeddedProviderError, } from './embedded/errors';
export { getUserEmbeddedWallet } from './utils/getUserEmbeddedWallet';
export { type CountryCode, countryCodesAndNumbers, formatPhoneNumber, getCountryCallingCode, getPhoneCountryCodeAndNumber, getPlaceholderPhoneNumber, lastFourDigits, phoneNumberTypingFormatter, validatePhoneNumber, } from './utils/phoneNumberUtils';
export { getUserEmbeddedSolanaWallet } from './utils/getUserEmbeddedSolanaWallet';
export { toObjectKeys } from './utils/toObjectKeys';
export { populateTransactionRequest, throwIfInvalidRecoveryUpgradePath } from './embedded/utils';
export { calculateTotalGasEstimate } from './embedded/utils/gas';
export { QuantityToBigNumber, convertBigNumberish, toEthersUnsignedTransaction, } from './embedded/utils/ethers';
export * from './types';
export * from './chains';
export default Privy;
