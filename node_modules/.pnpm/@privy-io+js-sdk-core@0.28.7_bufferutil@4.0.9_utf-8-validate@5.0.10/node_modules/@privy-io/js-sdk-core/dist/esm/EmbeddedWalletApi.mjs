import{PrivyClientError as e}from"./Error.mjs";import{DEFAULT_SUPPORTED_CHAINS as r}from"./chains/index.mjs";import{EmbeddedWalletProvider as t}from"./embedded/EmbeddedWalletProvider.mjs";import{EmbeddedSolanaWalletProvider as o}from"./embedded/EmbeddedSolanaWalletProvider.mjs";import{EmbeddedWalletProxy as s}from"./embedded/EmbeddedWalletProxy.mjs";import{errorIndicatesRecoveryIsNeeded as i}from"./embedded/errors.mjs";import{throwIfInvalidRecoveryUpgradePath as a}from"./embedded/utils/index.mjs";import"./chains/arbitrum.mjs";import"./chains/arbitrumGoerli.mjs";import"./chains/arbitrumSepolia.mjs";import"./chains/avalanche.mjs";import"./chains/avalancheFuji.mjs";import"./chains/base.mjs";import"./chains/baseGoerli.mjs";import"./chains/baseSepolia.mjs";import"./chains/berachainArtio.mjs";import"./chains/celo.mjs";import"./chains/celoAlfajores.mjs";import"./chains/filecoin.mjs";import"./chains/filecoinCalibration.mjs";import"./chains/garnetHolesky.mjs";import"./chains/goerli.mjs";import"./chains/holesky.mjs";import"./chains/linea.mjs";import"./chains/lineaTestnet.mjs";import"./chains/mainnet.mjs";import"./chains/optimism.mjs";import"./chains/optimismGoerli.mjs";import"./chains/optimismSepolia.mjs";import"./chains/polygon.mjs";import"./chains/polygonMumbai.mjs";import"./chains/redstone.mjs";import"./chains/redstoneHolesky.mjs";import"./chains/sepolia.mjs";import"./chains/zora.mjs";import"./chains/zoraSepolia.mjs";import"./chains/zoraTestnet.mjs";import"eventemitter3";import"./embedded/methods.mjs";import"./embedded/EventCallbackQueue.mjs";import"./embedded/types.mjs";import"@ethersproject/abstract-signer";import"@ethersproject/providers";import"./embedded/gas/arbitrum.mjs";import"@ethersproject/bignumber";import"./embedded/utils/ethers.mjs";import"./embedded/gas/bsc.mjs";import"./embedded/gas/op-stack.mjs";import"@ethersproject/contracts";import"@ethersproject/transactions";import"./embedded/gas/polygon.mjs";import"@ethersproject/units";import"fetch-retry";import"./chains/polygonAmoy.mjs";import"./embedded/utils/gas.mjs";class d{_privyInternal;_proxy;_chains=Array.from(r);constructor(e,r,t){this._privyInternal=e,r&&(this._proxy=new s(r)),t&&(this._chains=t)}setMessagePoster(e){this._proxy=new s(e)}async create(e,r,o,s,i,a){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");let d;if(d=r||(e?"user-passcode":"privy"),e&&"string"!=typeof e)throw new Error("Invalid recovery password, must be a string");if("privy"===d&&this._privyInternal.config?.embedded_wallet_config.require_user_password_on_create)throw new Error("Password not provided yet is required by App configuration");const n=await this._privyInternal.getAccessToken();if(!n)throw new Error("User must be logged in to create an embedded wallet");const{address:c}=await this._proxy.create({accessToken:n,recoveryMethod:d,recoveryPassword:e,recoveryAccessToken:o,recoverySecretOverride:s,iCloudRecordNameOverride:i,solanaAddress:a?.address});if(!c)throw new Error("Failed to create wallet");const{user:l}=await this._privyInternal.refreshSession();return{user:l,provider:new t({address:c,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}}async createSolana(r){if(!this._proxy)throw new e({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_creation_error"});const t=await this._privyInternal.getAccessToken();if(!t)throw new e({error:"User must be logged in to create an embedded wallet",code:"embedded_wallet_creation_error"});if(r?.ethereumAccount){if("privy"!==r.ethereumAccount.recovery_method)throw new e({error:"Cannot create Solana wallet for user with Ethereum wallet with user-controlled recovery",code:"embedded_wallet_creation_error"});await this.getProvider(r.ethereumAccount)}const{publicKey:s}=await this._proxy.createSolana({accessToken:t,ethereumAddress:r?.ethereumAccount?.address});if(!s)throw new e({error:"Failed to create wallet",code:"embedded_wallet_creation_error"});return this._privyInternal.callbacks?.setUser&&await this._privyInternal.refreshSession(),new o({publicKey:s,privyInternal:this._privyInternal,walletProxy:this._proxy})}async hasEmbeddedWallet(){const{user:e,token:r}=await this._privyInternal.refreshSession();if(!e||!r)throw new Error("User must be logged in to interact with embedded wallets");return!!this._getEmbeddedWallet(e)}async isPasswordRequired(){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const{user:e,token:r}=await this._privyInternal.refreshSession();if(!e||!r)throw new Error("User must be logged in to interact with embedded wallets");const t=this._getEmbeddedWallet(e);if(!t)return!1;if("privy"===t.recovery_method)return!1;try{return await this._proxy.connect({accessToken:r,address:t.address}),!1}catch(e){return i(e)}}async getProvider(e,r,o,s){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const i=await this._load(e,r,o,s);return new t({address:i,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}async getSolanaProvider(r){if(!this._proxy)throw new e({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_webview_not_loaded"});const t=await this._loadSolana(r);return new o({publicKey:t,privyInternal:this._privyInternal,walletProxy:this._proxy})}async setPassword(e,r){const{provider:t}=await this.setRecovery({wallet:e,recoveryMethod:"user-passcode",password:r});return t}async setRecovery({wallet:e,...r}){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");a({currentRecoveryMethod:e.recovery_method,upgradeToRecoveryMethod:"icloud-native"===r.recoveryMethod?"icloud":r.recoveryMethod});const o=await this._load(e),s=await this._privyInternal.getAccessToken();if(!s)throw new Error("User must be logged in to interact with embedded wallets");const i=e.recovery_method;this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_started",{address:e.address,target_recovery_method:r.recoveryMethod,existing_recovery_method:i});try{await this._proxy.setRecovery({accessToken:s,address:o,recoveryMethod:r.recoveryMethod,recoveryPassword:"user-passcode"===r.recoveryMethod?r.password:void 0,recoveryAccessToken:"google-drive"===r.recoveryMethod||"icloud"===r.recoveryMethod?r.recoveryAccessToken:void 0,recoverySecretOverride:"icloud-native"===r.recoveryMethod?r.recoverySecretOverride:void 0,iCloudRecordNameOverride:"icloud-native"===r.recoveryMethod?r.iCloudRecordNameOverride:void 0}),this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_completed",{address:e.address,target_recovery_method:r.recoveryMethod,existing_recovery_method:i});const{user:a}=await this._privyInternal.refreshSession();return{user:a,provider:new t({address:o,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}}catch(r){throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_failed",{address:e.address,recovery_method:e.recovery_method,error:r instanceof Error?r.message:"Unable to recover wallet"}),r}}getURL(){const e=new URL(`${this._privyInternal.baseUrl}/apps/${this._privyInternal.appId}/embedded-wallets`);return this._privyInternal.caid&&e.searchParams.append("caid",this._privyInternal.caid),this._privyInternal.appClientId&&e.searchParams.append("client_id",this._privyInternal.appClientId),e.href}getMessageHandler(){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return this._proxy.handleEmbeddedWalletMessages.bind(this._proxy)}onMessage(e){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return this._proxy.handleEmbeddedWalletMessages(e)}async ping(e){try{if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return await this._proxy.ping(e),!0}catch(e){return console.error(e),!1}}async _load(e,r,t,o){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const s=await this._privyInternal.getAccessToken();if(!s)throw new Error("User must be logged in to interact with embedded wallets");const a=e.address;try{return await this._proxy.connect({accessToken:s,address:a}),a}catch(d){if(i(d)){try{if("privy"===e.recovery_method){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:e.address,recovery_method:e.recovery_method});const r=await this._proxy.recover({accessToken:s,address:a});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:e.address,recovery_method:e.recovery_method}),r.address}if("user-passcode"===e.recovery_method&&r){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:e.address,recovery_method:e.recovery_method});const t=await this._proxy.recover({accessToken:s,address:a,recoveryPassword:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:e.address,recovery_method:e.recovery_method}),t.address}if(["google-drive","icloud"].includes(e.recovery_method)&&t){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:e.address,recovery_method:e.recovery_method});const r=await this._proxy.recover({accessToken:s,address:a,recoveryAccessToken:t});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:e.address,recovery_method:e.recovery_method}),r.address}if("icloud"===e.recovery_method&&o){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:e.address,recovery_method:"icloud-native"});const r=await this._proxy.recover({accessToken:s,address:a,recoverySecretOverride:o});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:e.address,recovery_method:"icloud-native"}),r.address}}catch(r){throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_failed",{address:e.address,recovery_method:e.recovery_method,error:r instanceof Error?r.message:"Unable to recover wallet"}),r}throw d}throw d}}async _loadSolana(e){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const r=await this._privyInternal.getAccessToken();if(!r)throw new Error("User must be logged in to interact with embedded wallets");const t=e.public_key;try{return await this._proxy.connectSolana({accessToken:r,publicKey:t}),t}catch(e){if(i(e)){return(await this._proxy.recoverSolana({accessToken:r,publicKey:t})).publicKey}throw e}}_getEmbeddedWallet(e){return e?.linked_accounts.find((e=>"wallet"===e.type&&"embedded"===e.connector_type&&"privy"===e.wallet_client_type))}}export{d as default};
